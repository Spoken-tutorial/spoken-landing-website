from dotenv import load_dotenv
"""
Django settings for spoken_main_website project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
dotenv_path = os.path.join(BASE_DIR, '.env')
load_dotenv(dotenv_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG")

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'spoken',
    'rest_framework',
    'import_export',
    'sso',
    'logs',
    'spokenlogin',
    'csc',
    'django_crontab',
    'django_ers',
    'cms',
    'cdcontent',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'sso.middleware.SSO',
]

ROOT_URLCONF = 'spoken_main_website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),
                os.path.join(BASE_DIR, 'spoken', 'templates', 'spoken'),
                os.path.join(BASE_DIR, 'csc', 'templates', 'csc'),
                ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
            ],
        },
    },
]

WSGI_APPLICATION = 'spoken_main_website.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv("DB"),
        'USER': os.getenv("DB_USER"),            
        'PASSWORD': os.getenv("DB_PASSWORD"),
        'HOST': '',  # Empty for localhost through domain sockets.          'HOST': '',  # Empty for localhost through domain sockets.
        'PORT': '',  # Set to empty string for default.         'PORT': '',  # Set to empty string for default.
    },

    'spk': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv("SPOKEN_DB"),
        'USER': os.getenv("SPOKEN_DB_USER"),
        'PASSWORD': os.getenv("SPOKEN_DB_PASS"),
        'HOST': os.getenv("SPOKEN_DB_HOST"),
        'PORT':'',
    },

    'ers': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv("ERS_DB"),
        'USER': os.getenv("ERS_DB_USER"),
        'PASSWORD': os.getenv("ERS_DB_PASS"),
        'HOST': os.getenv("ERS_DB_HOST"),
        'PORT':'',
    },

}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Calcutta'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/



STATIC_URL = '/static/'


MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'

CRISPY_TEMPLATE_PACK = 'bootstrap4'
IMPORT_EXPORT_USE_TRANSACTIONS = True

GOOGLE_RECAPTCHA_SECRET_KEY = os.getenv("GOOGLE_RECAPTCHA_SECRET_KEY")
GOOGLE_RECAPTCHA_SITE_KEY = os.getenv("GOOGLE_RECAPTCHA_SITE_KEY")

SAML_FOLDER = os.path.join(BASE_DIR, 'saml')

AUTHENTICATION_BACKENDS = [
    'spokenlogin.backends.SpokenBackend',
    'sso.backends.SSOBackend',
    'django.contrib.auth.backends.ModelBackend'
    ]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/var/tmp/django_cache',
        'TIMEOUT': 3600 * 24 * 7,
    }
}

if DEBUG:
    STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
else:
    STATIC_ROOT = os.path.join(BASE_DIR, "static")


REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer'
    ]
}

LOGIN_URL='/login/'
LOGOUT_REDIRECT_URL = 'home'
LOGIN_REDIRECT_URL = 'home'

NASSCOM_COURSES = os.getenv("NASSCOM_COURSES").split(",")

DATABASE_ROUTERS = [
    'spokenlogin.router.SpokenRouter',
    'django_ers.router.ERSRouter'
]

PASSWORD_HASHERS = (
    'django.contrib.auth.hashers.UnsaltedMD5PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.SHA1PasswordHasher',
    'django.contrib.auth.hashers.MD5PasswordHasher',
    'django.contrib.auth.hashers.CryptPasswordHasher',
)
CONTACT_MAIL = os.getenv("CONTACT_MAIL")
SPAM_EMAIL = os.getenv("SPAM_EMAIL")
CONTACT_MAIL = os.getenv("ADMIN_MAIL")

URL_FETCH_VLE = os.getenv("URL_FETCH_VLE")

CRONJOBS = [
    ('8 13 * * *', 'csc.cron.update_vle_data')
]
